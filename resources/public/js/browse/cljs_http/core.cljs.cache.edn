;; Analyzed by ClojureScript 0.0-3308
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name cljs-http.core, :imports {EventType goog.net.EventType, ErrorCode goog.net.ErrorCode, XhrIo goog.net.XhrIo, Jsonp goog.net.Jsonp}, :requires {ErrorCode goog.net.ErrorCode, EventType goog.net.EventType, async cljs.core.async, cljs-http.util cljs-http.util, Jsonp goog.net.Jsonp, cljs.core.async cljs.core.async, util cljs-http.util, s clojure.string, XhrIo goog.net.XhrIo, clojure.string clojure.string}, :uses nil, :defs {pending-requests {:name cljs-http.core/pending-requests, :file "resources/public/js/browse/cljs_http/core.cljs", :line 9, :column 1, :end-line 9, :end-column 22, :meta {:file "/home/mike/sandbox/mike/resources/public/js/browse/cljs_http/core.cljs", :line 9, :column 6, :end-line 9, :end-column 22}}, abort! {:protocol-inline nil, :meta {:file "/home/mike/sandbox/mike/resources/public/js/browse/cljs_http/core.cljs", :line 11, :column 7, :end-line 11, :end-column 13, :arglists (quote ([channel])), :doc "Attempt to close the given channel and abort the pending HTTP request\n  with which it is associated."}, :name cljs-http.core/abort!, :variadic false, :file "resources/public/js/browse/cljs_http/core.cljs", :end-column 13, :method-params ([channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channel])), :doc "Attempt to close the given channel and abort the pending HTTP request\n  with which it is associated."}, aborted? {:protocol-inline nil, :meta {:file "/home/mike/sandbox/mike/resources/public/js/browse/cljs_http/core.cljs", :line 22, :column 8, :end-line 22, :end-column 16, :private true, :arglists (quote ([xhr]))}, :private true, :name cljs-http.core/aborted?, :variadic false, :file "resources/public/js/browse/cljs_http/core.cljs", :end-column 16, :method-params ([xhr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhr]))}, apply-default-headers! {:protocol-inline nil, :meta {:file "/home/mike/sandbox/mike/resources/public/js/browse/cljs_http/core.cljs", :line 25, :column 7, :end-line 25, :end-column 29, :arglists (quote ([xhr headers])), :doc "Takes an XhrIo object and applies the default-headers to it."}, :name cljs-http.core/apply-default-headers!, :variadic false, :file "resources/public/js/browse/cljs_http/core.cljs", :end-column 29, :method-params ([xhr headers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xhr headers])), :doc "Takes an XhrIo object and applies the default-headers to it."}, build-xhr {:protocol-inline nil, :meta {:file "/home/mike/sandbox/mike/resources/public/js/browse/cljs_http/core.cljs", :line 32, :column 7, :end-line 32, :end-column 16, :arglists (quote ([{:keys [with-credentials? default-headers], :as request}])), :doc "Builds an XhrIo object from the request parameters."}, :name cljs-http.core/build-xhr, :variadic false, :file "resources/public/js/browse/cljs_http/core.cljs", :end-column 16, :method-params ([p__10379]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [with-credentials? default-headers], :as request}])), :doc "Builds an XhrIo object from the request parameters."}, error-kw {:name cljs-http.core/error-kw, :file "resources/public/js/browse/cljs_http/core.cljs", :line 45, :column 1, :end-line 45, :end-column 14, :meta {:file "/home/mike/sandbox/mike/resources/public/js/browse/cljs_http/core.cljs", :line 45, :column 6, :end-line 45, :end-column 14}}, xhr {:protocol-inline nil, :meta {:file "/home/mike/sandbox/mike/resources/public/js/browse/cljs_http/core.cljs", :line 57, :column 7, :end-line 57, :end-column 10, :arglists (quote ([{:keys [request-method headers body with-credentials? cancel], :as request}])), :doc "Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel."}, :name cljs-http.core/xhr, :variadic false, :file "resources/public/js/browse/cljs_http/core.cljs", :end-column 10, :method-params ([p__10384]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [request-method headers body with-credentials? cancel], :as request}])), :doc "Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel."}, jsonp {:protocol-inline nil, :meta {:file "/home/mike/sandbox/mike/resources/public/js/browse/cljs_http/core.cljs", :line 90, :column 7, :end-line 90, :end-column 12, :arglists (quote ([{:keys [timeout callback-name cancel], :as request}])), :doc "Execute the JSONP request corresponding to the given Ring request\n  map and return a core.async channel."}, :name cljs-http.core/jsonp, :variadic false, :file "resources/public/js/browse/cljs_http/core.cljs", :end-column 12, :method-params ([p__10442]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [timeout callback-name cancel], :as request}])), :doc "Execute the JSONP request corresponding to the given Ring request\n  map and return a core.async channel."}, request {:protocol-inline nil, :meta {:file "/home/mike/sandbox/mike/resources/public/js/browse/cljs_http/core.cljs", :line 117, :column 7, :end-line 117, :end-column 14, :arglists (quote ([{:keys [request-method], :as request}])), :doc "Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel."}, :name cljs-http.core/request, :variadic false, :file "resources/public/js/browse/cljs_http/core.cljs", :end-column 14, :method-params ([p__10477]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [request-method], :as request}])), :doc "Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:offline :request :get :file-not-found :jsonp :else :callback-name :recur :abort :http-error :headers :no-error :error-code :default-headers :with-credentials? :ff-silent-error :success :status :error-text :cancel :exception :timeout :body :keywordize-keys :custom-error :trace-redirects :access-denied :request-method}, :order [:jsonp :request :with-credentials? :default-headers :timeout :no-error :abort :access-denied :custom-error :http-error :ff-silent-error :file-not-found :offline :exception :request-method :headers :body :cancel :get :status :success :trace-redirects :error-code :error-text :recur :else :callback-name :keywordize-keys]}, :doc nil}